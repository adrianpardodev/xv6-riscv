# Tarea 2: Sistema de Prioridades y Boost en xv6

## Descripción

He implementado un sistema de prioridades y boost en el programador de procesos de xv6. Cada proceso tiene una prioridad inicial de 0 (donde 0 es la prioridad más alta) y un boost inicial de 1. La prioridad de los procesos aumenta o disminuye en función del valor del boost, el cual cambia dinámicamente.

## Modificaciones

1. Agregué dos campos a la estructura de proceso (`struct proc`):
   - `priority`: Indica la prioridad del proceso (0 es la más alta).
   - `boost`: Controla si la prioridad del proceso aumenta o disminuye (inicialmente 1).
   
2. Modifiqué la función `allocproc()` para inicializar `priority` en 0 y `boost` en 1.

3. En la función `scheduler()`, implementé la lógica para incrementar o disminuir la prioridad de los procesos de acuerdo a las siguientes reglas:
   - Si `priority` llega a 9, el boost cambia a -1.
   - Si `priority` baja a 0, el boost cambia a 1.

4. Creé un programa de prueba (`testprio.c`) que genera 20 procesos usando `fork()`. Cada proceso imprime un mensaje con su PID y hace una pausa con `sleep`.

## Programa de prueba

El programa de prueba crea 20 procesos. Cada proceso imprime su PID para demostrar que el programador está funcionando correctamente. El programa está ubicado en `user/testprio.c`.

## Ejecución

Para ejecutar el programa de prueba en xv6:

1. Compilé el sistema utilizando:
   ```bash
   make qemu

2. probe testprio en qemu y funciono
